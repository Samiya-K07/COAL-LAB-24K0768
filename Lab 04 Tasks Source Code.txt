Task 01
-----------------------------------------------------------------------
1. MOVE EBX, 5h
=> MOVE is not a valid instruction 
=> MOV EBX, 5h is correct

2. INC CX, 5
=> INC only increments by 1 and is not used to assign an operand like 5
=> ADD CX, 5 is correct

3. MOV 10h, AX
=> For AX, we need to use memory brackets for memory addressing
=> MOV [10h], AX is correct

4. MOV DX, DL
=> Cannot move between registers of different sizes
=> MOV DH, 0 
=> MOV DH, DL is correct

5. ADD 5, BX 
=> The destination cannot be an immediate value 
=> ADD BX, 5 is correct

6. MOV EAX 45d
=> Missing comma between the two operands
=> MOV EAX, 45d is correct

7. ADD 5, 5
=> The destination cannot be an immediate value, only a register/memory
=> MOV AX, 5
=> ADD AX, 5 (adding 5 two times) is correcy
------------------------------------------------------------------------

Task 02
------------------------------------------------------------------------
INCLUDE Irvine32.inc

.data

.code
main proc

mov al, 53h  ;'S'     
mov bl, 61h  ;'a'

call DumpRegs     


exit
main endp
end main
------------------------------------------------------------------------

Task 03
------------------------------------------------------------------------
INCLUDE Irvine32.inc

.data
var1 BYTE +56 
var2 SWORD -300 
var3 DWORD +500 

.code
main proc

movsx eax, var1
call WriteInt
call Crlf

movsx ebx, var2
mov eax, ebx
call WriteInt
call Crlf

mov ecx, var3
mov eax, ecx
call WriteInt
call Crlf

exit
main endp
end main
------------------------------------------------------------------------

Task 04
------------------------------------------------------------------------
INCLUDE Irvine32.inc

.data
val1 DWORD 15h      
val2 BYTE  57o      
val3 WORD  100d    

.code
main proc

mov eax, 90          
add eax, 65Eh        
sub eax, 76o         
sub eax, 45          
add eax, 11010b      

call WriteInt
call CRLF

mov eax, val1        
movzx ebx, val2      
sub eax, ebx        
sub eax, 64h       
movsx ecx, val3      
add eax, ecx         

call WriteInt
call CRLF

exit
main endp
end main
------------------------------------------------------------------------

Task 05
------------------------------------------------------------------------
INCLUDE Irvine32.inc
     

.data
SecondsInDay EQU 24 * 60 * 60

.code
main PROC

mov eax, SecondsInDay   
call WriteDec          
call Crlf

exit
main endp
end main
------------------------------------------------------------------------

Task 06
------------------------------------------------------------------------
INCLUDE Irvine32.inc

.data
A DWORD 0FF1Ah      
B DWORD 0EE0Ah    

.code
main proc

mov eax, A        
mov ebx, B        
mov A, ebx        
mov B, eax        
    
call DumpRegs     

exit
main endp
end main
------------------------------------------------------------------------

Task 07
------------------------------------------------------------------------
INCLUDE Irvine32.inc

.data
val1 BYTE 10h
val2 WORD 8000h
val3 DWORD 0FFFEh
val4 WORD 7FFEh

.code
main proc

inc val2            

mov eax, val3       
movzx ebx, val1    
sub eax, ebx
mov val3, eax       

mov ax, val2        
mov cx, val4       
sub ax, cx          
mov val2, ax        
movzx eax, ax       

call DumpRegs

exit
main endp
end main
------------------------------------------------------------------------
